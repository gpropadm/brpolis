// üèõÔ∏è BRPolis - Prisma Database Schema (PostgreSQL)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Planos dispon√≠veis
model Plan {
  id               String    @id @default(cuid())
  name             String    @unique // "B√°sico", "Profissional", "Premium", "Enterprise"
  description      String
  price            Float     // Pre√ßo mensal em R$
  maxVoters        Int       // M√°ximo de eleitores
  maxMessages      Int       // M√°ximo de mensagens WhatsApp por m√™s
  maxCampaigns     Int       // M√°ximo de campanhas simult√¢neas
  hasAI            Boolean   @default(false)
  hasAdvancedAnalytics Boolean @default(false)
  hasApi           Boolean   @default(false)
  features         String    // JSON com features espec√≠ficas
  isActive         Boolean   @default(true)
  
  // Relacionamentos
  users            User[]
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("plans")
}

// Usu√°rios do sistema
model User {
  id              String       @id @default(cuid())
  email           String       @unique
  password        String       // Hash bcrypt da senha
  name            String
  avatar          String?
  role            String       @default("CANDIDATE") // SUPER_ADMIN, ADMIN, CANDIDATE, SECRETARY, ADVISOR, VOLUNTEER
  politicalRole   String?                           // PRESIDENT, GOVERNOR, SENATOR, FEDERAL_DEPUTY, STATE_DEPUTY, MAYOR, COUNCILOR
  state           String?
  city            String?
  party           String?
  phone           String?
  
  // Plano e limites
  planId          String?
  plan            Plan?        @relation(fields: [planId], references: [id])
  planExpiresAt   DateTime?    // Quando o plano expira
  
  // Controle de acesso
  isActive        Boolean      @default(true)
  isEmailVerified Boolean      @default(false)
  emailVerifiedAt DateTime?
  lastLogin       DateTime?
  loginAttempts   Int          @default(0)
  lockedUntil     DateTime?
  
  // Auditoria
  createdBy       String?      // ID do admin que criou
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@map("users")
}

// Tokens para reset de senha e verifica√ß√£o de email
model VerificationToken {
  id         String    @id @default(cuid())
  userId     String
  token      String    @unique
  type       String    // "email_verification", "password_reset"
  expiresAt  DateTime
  usedAt     DateTime?
  
  createdAt  DateTime  @default(now())

  @@map("verification_tokens")
}

// Sess√µes de usu√°rio
model UserSession {
  id          String    @id @default(cuid())
  userId      String
  token       String    @unique
  ipAddress   String?
  userAgent   String?
  expiresAt   DateTime
  
  createdAt   DateTime  @default(now())
  lastUsedAt  DateTime  @default(now())

  @@map("user_sessions")
}

// Campanhas eleitorais
model Campaign {
  id          String         @id @default(cuid())
  candidateId String
  
  name        String
  description String?
  politicalRole String
  state       String
  city        String?
  startDate   DateTime
  endDate     DateTime
  budget      Float
  status      String         @default("PLANNING") // PLANNING, ACTIVE, PAUSED, COMPLETED, CANCELLED
  
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("campaigns")
}

// Base de eleitores
model Voter {
  id            String       @id @default(cuid())
  candidateId   String
  
  name          String
  email         String?
  phone         String?
  cpf           String?      @unique
  birthDate     DateTime?
  gender        String?      // MALE, FEMALE, OTHER, PREFER_NOT_SAY
  profession    String?
  educationLevel String?     // ELEMENTARY, HIGH_SCHOOL, COLLEGE, GRADUATE, POST_GRADUATE
  incomeRange   String?      // UNDER_2, FROM_2_TO_5, FROM_5_TO_10, FROM_10_TO_20, OVER_20
  interests     String       // JSON string
  status        String       @default("POTENTIAL") // SUPPORTER, POTENTIAL, NEUTRAL, OPPONENT, UNDECIDED
  score         Int          @default(0) // 0-100
  lastContact   DateTime?
  
  // Endere√ßo
  street        String?
  number        String?
  neighborhood  String?
  city          String
  state         String
  zipCode       String?
  latitude      Float?
  longitude     Float?
  zone          String?      // Zona eleitoral
  section       String?      // Se√ß√£o eleitoral
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("voters")
}

// Mensagens WhatsApp
model WhatsAppMessage {
  id            String        @id @default(cuid())
  candidateId   String
  voterId       String?
  campaignId    String?
  
  recipientPhone String
  message       String
  templateId    String?
  status        String        @default("PENDING") // PENDING, SENT, DELIVERED, READ, FAILED, RESPONDED
  
  sentAt        DateTime?
  deliveredAt   DateTime?
  readAt        DateTime?
  respondedAt   DateTime?
  response      String?
  
  cost          Float         @default(0)
  
  createdAt     DateTime      @default(now())

  @@map("whatsapp_messages")
}

// Insights de IA
model AIInsight {
  id          String      @id @default(cuid())
  candidateId String
  
  type        String      // SENTIMENT, TREND, PREDICTION, RECOMMENDATION
  title       String
  content     String      // Conte√∫do do insight
  confidence  Int         // 0-100
  priority    String      @default("MEDIUM") // LOW, MEDIUM, HIGH
  
  createdAt   DateTime    @default(now())

  @@map("ai_insights")
}

// An√°lises de sentimento
model SentimentAnalysis {
  id          String   @id @default(cuid())
  candidateId String
  
  source      String   // twitter, facebook, instagram, whatsapp, news, surveys
  content     String
  sentiment   String   // positive, negative, neutral
  confidence  Int      // 0-100
  emotions    String   // JSON: joy, anger, fear, sadness, surprise, disgust
  keywords    String   // JSON array
  
  // Localiza√ß√£o
  city        String?
  state       String?
  latitude    Float?
  longitude   Float?
  
  // Demografia
  ageRange    String?
  gender      String?
  educationLevel String?
  
  processed   Boolean  @default(false)
  
  createdAt   DateTime @default(now())

  @@map("sentiment_analysis")
}

// Eventos e atividades
model Event {
  id          String   @id @default(cuid())
  candidateId String
  
  title       String
  description String?
  type        String   // comicio, reuniao, entrevista, debate
  
  startDate   DateTime
  endDate     DateTime?
  location    String
  address     String?
  latitude    Float?
  longitude   Float?
  
  capacity    Int?
  attendees   Int      @default(0)
  cost        Float    @default(0)
  
  isPublic    Boolean  @default(true)
  status      String   @default("scheduled") // scheduled, ongoing, completed, cancelled
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("events")
}

// Configura√ß√µes do sistema
model SystemSetting {
  id          String   @id @default(cuid())
  candidateId String?
  
  key         String
  value       String   // JSON string
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([candidateId, key])
  @@map("system_settings")
}